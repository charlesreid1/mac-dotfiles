######################
## see bottom for url shorthands,
## but worth mentioning here:
#
## replace any git@github stuff with gh:
## replace any ssh://git@g.... with cmr:

[user]
    email = charlesreid1@gmail.com
    name = Charles Reid
[credential]
    helper = cache
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
[push]
    default = simple
[alias]

    # courtesy of https://stackoverflow.com/a/34467298
    lg = !"git lg1"
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    # typo stuff
    co = checkout
    cehckout = checkout
    ceckout = checkout
    chekout = checkout
    commti = commit
    comimt = commit
    comit = commit

    # https://victorzhou.com/blog/git-aliases/
    a = add
    cm = commit -m
    rh = reset --hard
    lo = log --oneline -n 10
    lolo = log --oneline -n 50

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status: short format and long format
    s = status -s
    ss = status

    # Just print the name of the current branch
    cb = branch --show-current

    # Show branches
    b = branch -v
    bv = branch -v
    bb = branch -v

    ba = branch -a
    bb = branch -v -a

    # Show remotes
    r = remote -v
    rv = remote -v
    ra = remote -v

    f = fetch --all

    # Show log history of commits on this branch
    # that are different from master
    # (these aliases are useful for rebases)
    #
    # dm = *Different from *Master (log)
    # https://stackoverflow.com/a/59273667/463213
    dm = "log --boundary --right-only --graph --oneline master..HEAD"

    # dms = *Different from *Master, *Status
    dms = "diff --stat master..HEAD"

    # dmf = *Different from *Master, *Files
    dmf = "diff --name-only master..HEAD"

    # show diff of staged changes
    cdiff = diff --cached
    cd = diff --cached

    # Interactive rebase with the given number of latest commits
    # reb N = interactive rebase with last N commits (inclusive)
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # continue the rebase
    rebc = "rebase --continue"

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    p = "!f() { git pull $1 $2; }; f"

    # Pull in remote changes for the current repository and all its submodules
    pp = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Oops
    fix = commit --amend --reuse-message=HEAD --edit

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it 
    # from the current branch if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # List aliases
    aliases = config --get-regexp alias

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    ### # Find branches containing commit
    ### fb = "!f() { git branch -a --contains $1; }; f"

    ### # Find tags containing commit
    ### ft = "!f() { git describe --always --contains $1; }; f"

    ### # Find commits by source code
    ### fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    ### # Find commits by commit message
    ### fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    editor = vim

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    ###trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[diff]

    # Detect copies as well as renames
    renames = copies

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]

    # Use the Git 1.x.x default to avoid errors on machines with old Git
    # installations. To use `simple` instead, add this to your `~/.extra` file:
    # `git config --global push.default simple`. See http://git.io/mMah-w.
    default = matching
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

# URL shorthands


[url "ssh://git@git.charlesreid1.com:222/"]

    insteadOf = "cmr:"


[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"

[rerere]

    enabled = true
    autoupdate = true
